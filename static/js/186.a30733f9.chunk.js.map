{"version":3,"file":"static/js/186.a30733f9.chunk.js","mappings":"8SACMA,EAAM,mCAECC,EAAY,mCAAG,oGACDC,EAAAA,EAAAA,IAAA,iEAAoEF,IADnE,cAClBG,EADkB,yBAEjBA,EAASC,KAAKC,SAFG,2CAAH,qDAKZC,EAAY,mCAAG,WAAOC,GAAP,uFACDL,EAAAA,EAAAA,IAAA,6CAAgDK,EAAhD,oBAA8DP,IAD7D,cAClBG,EADkB,yBAEjBA,EAASC,MAFQ,2CAAH,sDAIZI,EAAiB,mCAAG,WAAOC,GAAP,uFACNP,EAAAA,EAAAA,IAAA,4DAA+DF,EAA/D,kBAA4ES,IADtE,cACvBN,EADuB,yBAEtBA,EAASC,MAFa,2CAAH,sDAIjBM,EAAS,mCAAG,WAAOH,GAAP,uFACEL,EAAAA,EAAAA,IAAA,6CAAgDK,EAAhD,4BAAsEP,IADxE,cACfG,EADe,yBAEdA,EAASC,MAFK,2CAAH,sDAITO,EAAY,mCAAG,WAAOJ,GAAP,uFACDL,EAAAA,EAAAA,IAAA,6CAAgDK,EAAhD,4BAAsEP,IADrE,cAClBG,EADkB,yBAEjBA,EAASC,MAFQ,2CAAH,qD,kHCkBzB,UAlCgB,WACd,OAA8BQ,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KAEQC,GAAYC,EAAAA,EAAAA,MAAZD,SAERE,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAS,mCAAG,8GAEKP,EAAAA,EAAAA,IAAaI,GAFlB,OAERX,EAFQ,OAGdU,GAAW,OAAIV,EAAKC,UAHN,uGAAH,qDAMfa,GACD,GAAE,CAACH,IAEJ,IAAMI,EAAUN,EAAQO,KAAI,YAA8B,IAA3Bb,EAA0B,EAA1BA,GAAIc,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QACzC,OACE,2BACE,wBAAKD,KACL,uBAAIC,MAFGf,EAKZ,IAED,OACE,8BACGM,EAAQU,OAAS,EAChBJ,GAEA,oEAIP,C","sources":["Shered/api/movies.js","components/Reviews/Reviews.jsx"],"sourcesContent":["import axios from \"axios\";\nconst KEY = \"1c91a24341f096a044c8c534ec1c5275\"\n\nexport const fetchPopular = async () => {\n    const response = await axios.get(`https://api.themoviedb.org/3/trending/all/week?api_key=${KEY}`)\n    return response.data.results\n}\n\nexport const fetchMovieID = async (id) => {\n    const response = await axios.get(`https://api.themoviedb.org/3/movie/${id}?api_key=${KEY}`)\n    return response.data\n}\nexport const fetchSearchMovies = async (search) => {\n    const response = await axios.get(`https://api.themoviedb.org/3/search/movie?api_key=${KEY}&query=${search}`)\n    return response.data\n}\nexport const fetchCast = async (id) => {\n    const response = await axios.get(`https://api.themoviedb.org/3/movie/${id}/credits?api_key=${KEY}`)\n    return response.data\n}\nexport const fetchReviews = async (id) => {\n    const response = await axios.get(`https://api.themoviedb.org/3/movie/${id}/reviews?api_key=${KEY}`)\n    return response.data\n}","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { fetchReviews } from '../../Shered/api/movies';\n\nconst Reviews = () => {\n  const [reviews, setReviews] = useState([]);\n\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const data = await fetchReviews(movieId);\n        setReviews([...data.results]);\n      } catch (error) {}\n    };\n    fetchData();\n  }, [movieId]);\n\n  const element = reviews.map(({ id, author, content }) => {\n    return (\n      <li key={id}>\n        <h5>{author}</h5>\n        <p>{content}</p>\n      </li>\n    );\n  });\n\n  return ( \n    <>\n      {reviews.length > 0 ? (\n        element\n      ) : (\n        <p>We dont have any reviews for this movie</p>\n      )}\n    </>\n  );\n};\nexport default Reviews;\n"],"names":["KEY","fetchPopular","axios","response","data","results","fetchMovieID","id","fetchSearchMovies","search","fetchCast","fetchReviews","useState","reviews","setReviews","movieId","useParams","useEffect","fetchData","element","map","author","content","length"],"sourceRoot":""}